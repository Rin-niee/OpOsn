
import networkx as nx
import matplotlib.pyplot as plt
import numpy as np
from scipy.optimize import linprog

# ùëê=[{‚àíùëùùëò},ùëüùëíùë†‚Ñéùëéùëùùëí(ùëêùëñùëó,1,ùëÅ2),ùëßùëíùëüùëúùë†(1,ùëÅ2)]1√ó(ùêæ+2ùëÅ2)
# ùê¥ùëíùëû=[ùê¥ùëíùëû(3);ùê¥ùëíùëû(4);ùê¥ùëíùëû(11)](1+ùëÅ+1)√ó(ùêæ+2ùëÅ2)
#ùëèùëíùëû=ùëßùëíùëüùëúùë†(1,1+ùëÅ)
# ùê¥=[ùê¥(2);ùê¥(7)](ùêø+ùëÅ2)√ó(ùêæ+2ùëÅ2) ùê¥(2)=[ùê¥ùëôùëò,ùëßùëíùëüùëúùë†(ùêø,2ùëÅ2)]ùêø√ó(ùêæ+2ùëÅ2)
# ùëè=ùëèùëô
# ùëèùëúùë¢ùëõùëëùë†=[ùëßùëíùëüùëúùë†(1,(ùêæ+2ùëÅ2));[{ùëÑùëò},ùëßùëíùëüùëúùë†(1,)]]

K = int(input("–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤"))  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
L = int(input("–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ —Å—ã—Ä—å—è")) # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ —Å—ã—Ä—å—è

pk = np.random.randint(100, size=(K)) # —Ü–µ–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ —Ç–∏–ø–∞ k
bl = np.random.randint(1000, size=(L))  # –∑–∞–ø–∞—Å —Å—ã—Ä—å—è —Ç–∏–ø–∞ l

Alk = np.random.randint(20, size=(K, L))

dij = np.array([[0,  90, 60,   75,  0,  0,   0,  0,   0,  0,  0,  0,    0,   0,   0,   0,    0,   0], #1
              [0,   0,  0,   0, 25,  0,   0,  0,   0,  0,  0,  0,    0,   0,   0,   0,    0,   0],  #2
              [0,   0,  0,   0,  0, 70,   0,  0,   0,  0,  0,  0,    0,   0,   0,   0,    0,   0], #3
              [0,   0,  0,   0,  0,  0,   75,  0,   0,  0,  0,  0,    0,   0,   0,   0,    0,   0], #4
              [0,   0,  0,   0,  0,  0,   0, 25,   0,  0,  0,  0,    0,   0,   0,   0,    0,   0], #5
              [0,   0,  0,   0,  0,  0,   0,  0,  70,  0,  0,  0,    0,   0,   0,   0,    0,   0], #6
              [0,   0,  0,   0,  0,  0,   0,  0,   0,  75,  0,  0,    0,   0,   0,   0,    0,   0], #7
              [0,   0,  0,   0,  0,  0,   0,  0,   0,  0, 25,  0,    0,   0,   0,   0,    0,   0], #8
              [0,   0,  0,   0,  0,  0,   0,  0,   0,  0,  0, 70,    0,   0,   0,   0,    0,   0], #9
              [0,   0,  0,   0,  0,  0,   0,  0,   0,  0,  0,  0,    75,   0,   0,   0,    0,   0], #10
              [0,   0,  0,   0,  0,  0,   0,  0,   0,  0,  0,  0,   25,   0,   0,   0,    0,   0], #11
              [0,   0,  0,   0,  0,  0,   0,  0,   0,  0,  0,  0,   70,   0,   0,   0,    0,   0], #12
              [0,   0,  0,   0,  0,  0,   0,  0,   0,  0,  0,  0,    0,  85,  50,   0,    0,   0], #13
              [0,   0,  0,   0,  0,  0,   0,  0,   0,  0,  0,  0,    0,   0,   0,  35,   50,   0], #14
              [0,   0,  0,   0,  0,  0,   0,  0,   0,  0,  0,  0,    0,   0,   0,   0,   30,  20], #15
              [0,   0,  0,   0,  0,  0,   0,  0,   0,  0,  0,  0,    0,   0,   0,   0,    0,   0], #16
              [0,   0,  0,   0,  0,  0,   0,  0,   0,  0,  0,  0,    0,   0,   0,   0,    0,   0], #17
              [0,   0,  0,   0,  0,  0,   0,  0,   0,  0,  0,  0,    0,   0,   0,   0,    0,   0]]) #18
matrix_size = len(dij)
N = 0
for i in range(len(dij)):
    for j in range(len(dij)):
        if dij[i, j]!=0:
            N+=1
#–º–∞—Ç—Ä–∏—Ü–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–Ω–æ—Å—Ç–∏ +
def matrix_incidence(x, matrix_size):
    D1 = np.zeros((matrix_size, matrix_size))
    for i in range(matrix_size):
        for j in range(matrix_size):
            if x[i, j] != 0:
                D1[i, j] = 1
            elif ((x[i, j] == 0) and (x[j, i]!=0)):
                D1[i, j] = -1
    return D1
D = matrix_incidence(dij, matrix_size)
def GraphDraw(x, x1):
    G = nx.DiGraph()
    for i in range(matrix_size):
        G.add_node(i)
        for j in range(matrix_size):
            if (x1[i, j] > 0):
                G.add_edges_from([(i, j)])
                G.add_edge(i, j, weight=x[i][j])
    pos = nx.circular_layout(G)
    plt.figure(figsize=(8, 8))
    nx.draw(G, pos, with_labels=True)
    labels = nx.get_edge_attributes(G, 'weight')
    nx.draw_networkx_edge_labels(G, pos, edge_labels=labels)
    plt.show()
    return G
D1 = GraphDraw(dij, D)





print("–º–∞—Ç—Ä–∏—Ü–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–Ω–æ—Å—Ç–∏", D1)



#–≥—Ä–∞—Ñ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å
Qk = [50, 70]  # —Å–ø—Ä–æ—Å –Ω–∞ —Ç–æ–≤–∞—Ä —Ç–∏–ø–∞ k

cij = np.array([[2, 3, 4, 5],
                [3, 2, 5, 4],
                [4, 5, 3, 2]])
