import numpy as np
from scipy.optimize import linprog
import matplotlib.pyplot as plt
import networkx as nx

K = int(input("–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤"))  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
L = int(input("–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ —Å—ã—Ä—å—è"))
M = int(input("–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"))
N = 12
Pkm = np.random.randint(100, size=(K, M)) #—Ü–µ–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∏–ø–∞ k –≤ –¥–µ–Ω—å m
Ylm = np.random.randint(50, size=(L, M)) #–æ–±—ä–µ–º —Å—ã—Ä—å—è l –≤ –¥–µ–Ω—å m
Alk = np.random.randint(20, size=(K, L)) #–±—ä–µ–º —Å—ã—Ä—å—è —Ç–∏–ø–∞ l –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ —Ç–∏–ø–∞ k
Qk = np.random.randint(30, size=(K)) #—Å–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤ —Ç–∏–ø–∞ k

D = np.array([[0, 90, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 50, 43, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 55,  4, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 54, 70, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 90, 78, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 69, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 59, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])  #<-–º–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
Cij = np.array([[0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 7, 70, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 3, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) #<-–º–∞—Ç—Ä–∏—Ü–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–∑–æ–∫
# res = [x11,lyam11, z11, b11]
# ùë•ùëòùëö ‚Äì –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ —Ç–∏–ø–∞ ùëò –≤ –¥–µ–Ω—å ùëö;
# ùúÜùëñùëó ‚Äì —Ñ–∞–∫—Ç –ø–µ—Ä–µ–≤–æ–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ø—É–Ω–∫—Ç–∞ ùëñ –≤ ùëó;
# ùëßùëñùëó ‚Äì –æ–±—ä–µ–º –ø–µ—Ä–µ–≤–æ–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ø—É–Ω–∫—Ç–∞ ùëñ –≤ ùëó;
# ùëèùëôùëö ‚Äì –∑–∞–ø–∞—Å —Å—ã—Ä—å—è —Ç–∏–ø–∞ ùëô –≤ –¥–µ–Ω—å ùëö;
def celevaya(Pkm, Cij, K, M, N):
# reshape(p), reshape(c), 0(–Ω–µ—Ç z, –∫–∞–∫ –∏ b)
    C1= list(-np.reshape(Pkm, K*M))
    C2 = list(np.reshape(Cij, N*N))
    C34 = [0]*(L*M + N ** 2)
    C = []
    C.extend(C1)
    C.extend(C2)
    C.extend(C34)
    return C
C = celevaya(Pkm, Cij, K, M, N)
A_eq = []
b_eq = []
#3, 4, 11, 12
# ‚àëùë•ùëòùëöùëò,ùëö=‚àëùëß1ùëóùëó (3)
# ‚àëùëßùëñùëóùëó=‚àëùëßùëóùëñùëó (4)
# ‚àëùëßùëñùëÅùëñ=‚àëùë•ùëòùëöùëò,ùëö (11)
# ùëèùëô(ùëö+1)=ùëèùëôùëö‚àí‚àëùê¥ùëôùëòùë•ùëòùëöùëò+ùõæùëôùëö (12)
A_eq3 = [1] * (K*M) + [0] * (N ** 2) + [0] + [-1] * (N - 1) + [0] * (N * (N - 1))+ [0] *(L*M)
#print(A_eq3)
A_eq4 = [[0] * N ** 2 for i in range(N)]
for i in range(N):
    for j in range(N):
        if D[i][j] != 0:
            A_eq4[i][i*N + j] = 1
            A_eq4[j][i*N + j] = -1
for i in range(N):
    A_eq4[i] = [0] * (K + N ** 2) + A_eq4[i]
A_eq4 = A_eq4[1: N - 1]
A_eq11 = [1]*(K*M) + [0]*(N ** 2) + ([0]*(N - 1)+[-1])*N + [0]*(L*M)
A_eq.append(A_eq3)
A_eq.append(A_eq4)
A_eq.append(A_eq11)
#—Ç—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 12 —É—Å–ª–æ–≤–∏–µ, –Ω–æ –µ–≥–æ —É–∫—Ä–∞–ª–∏ —Ü—ã–≥–∞–Ω–µ, –∏–∑–≤–∏–Ω–∏—Ç–µ
#2, 5, 6, 7, 9
A_ub = []
b_ub = []
#–≤ —É—Å–ª–æ–≤–∏—è—Ö –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–¥–æ, –æ–Ω–∏  —Å—Ç—Ä–µ–º–Ω—ã–µ.
#2
for l in range(L):
    A_ub.append(list(Alk[l]) + [0] * 2 * (N ** 2)+[-1]*(L*M))
b_ub += 0
#5
for k in range(K):
    A_ub.append([1] * (K*M) + [0]*(2 * (N ** 2))) + [0]*(L*M)
b_ub += list(Qk)
#6
for j in range(N ** 2):
    A_ub.append([0] * (K + 2 * N ** 2))
    A_ub[-1][K + N ** 2 + j] = 1
A_ub+=[0]*(M*L)
b_ub += list(D.flatten())
#7
for j in range(N ** 2):
    A_ub.append([0] * (K + 2 * N ** 2))
    A_ub[-1][K + j] = -10
    A_ub[-1][K + N ** 2 + j] = 1
A_ub+=[0]*(M*L)
b_ub += [0] * (N ** 2)
#9
for j in range(N ** 2):
    A_ub.append([0] * (K + M*L + 2 * N ** 2))
    A_ub[-1][K + j] = 1

b_ub += [1] * (N ** 2)
res = linprog(c=C, A_ub=A_ub, b_ub=b_ub, A_eq=A_eq, b_eq=b_eq, integrality=np.ones(K+2*N**2))
# –†–µ—à–∞–µ–º –∑–∞–¥–∞—á—É
b = res.x
b = b[-(len(Cij) ** 2):].reshape(len(Cij), len(Cij))
print(b, "\nGraph ======\n", D, "\nResolution======\n", res.x)

def vs(matrix1, matrix2, matrix3=[]):
    G = nx.DiGraph(matrix1)
    pos = nx.spring_layout(G)  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —É–∑–ª–æ–≤
    nx.draw(G, pos, with_labels=True, node_size=700,
            node_color="lightblue")  # –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ
    edge_labels = {}
    for i, j, w in G.edges(data=True):
        label = f'{w["weight"] if w["weight"] != 0 else 0} , {matrix2[i, j]}'
        if len(matrix3) > 0:
            label += f' | {matrix3[i, j]}'
        edge_labels[(i, j)] = label
    nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_color='blue',font_size=7)  # –†–∏—Å—É–µ–º –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ —Ä–µ–±—Ä–∞—Ö
    plt.show()
vs(D, Cij)

vs(b, D, Cij)  # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤,  –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏
