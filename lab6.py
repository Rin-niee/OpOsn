#!/usr/bin/env python
# coding: utf-8

# # Функции вспомогательные

# In[1]:


import numpy as np
import pandas as pd
import webbrowser
import os

# In[3]:


def print_matrix2(M, R, C):
    df = pd.DataFrame(M, columns=C, index=R)

    s1 = df.style.apply(lambda x: ["background: #A6CB75" if v != 0 else "" for v in x], axis=1)

    html_file = "styled_tableb.html"
    with open(html_file, "w") as file:
        file.write(s1._repr_html_())

    # Открытие HTML файла в браузере
    webbrowser.open('file://' + os.path.realpath(html_file))
    df.to_csv('file1.xls')


def export_matrix2(M, R, C, name):
    df = pd.DataFrame(M, columns=C, index=R)
    df.to_excel(name)


# In[4]:


def print1sudoku(X):
    rows, cols = 9, 9
    M = [[""] * cols for _ in range(rows)]
    for i in Kl:
        for j in Kl:
            for k in Kl:
                if X[k][i][j] == 1: M[i][j] = k + 1

    df = pd.DataFrame(M, columns=None, index=None)
    styler0 = df.style
    styler0.set_table_attributes('style="font-size: 15px"')
    styler0.set_table_styles([{'selector': '*', 'props':
        [('color', 'black'), ('border-style', 'solid'), ('border-width', '1px')]},
                              {'selector': 'th', 'props':
                                  [('background-color', 'white'), ('font-size', '5px'), ('color', 'white')]},
                              {'selector': 'td:nth-child(4), td:nth-child(7)', 'props':
                                  [('border-right-width', '3px')]},
                              {'selector': 'tr:nth-child(3)>td, tr:nth-child(6)>td', 'props':
                                  [('border-bottom-width', '3px')]},
                              ])
    html_file = "styled_tablef.html"
    with open(html_file, "w") as file:
        file.write(styler0._repr_html_())

    # Открытие HTML файла в браузере
    webbrowser.open('file://' + os.path.realpath(html_file))
    print("")


# In[118]:


def printnsudoku(X):
    rows, cols = 9 * N - 3 * (N - 1), 9 * N - 3 * (N - 1)
    M = [[""] * cols for _ in range(rows)]
    i0n, j0n = 0, 0
    n = 0
    for e in Eq:
        if n == (e[0][0] - 1): i0n, j0n = 0, 0
        n = (e[0][0] - 1)
        m = (e[0][1] - 1)
        ru = (e[1][0] - 1) - (e[2][0] - 1)
        rv = (e[1][1] - 1) - (e[2][1] - 1)
        i0m = (i0n + ru * 3)
        j0m = (j0n + rv * 3)
        for i in Kl:
            i1 = i0n + i
            i2 = i0m + i
            for j in Kl:
                j1 = j0n + j
                j2 = j0m + j
                for k in Kl:
                    if X[n][k][i][j] == 1: M[i1][j1] = k + 1
                    if X[m][k][i][j] == 1: M[i2][j2] = k + 1
                if M[i1][j1] == "": M[i1][j1] = '_'
                if M[i2][j2] == "": M[i2][j2] = '_'
        i0n = i0m
        j0n = j0m
    i, j = (4, 3)
    sel, sel2 = 'td:nth-child(4)', 'tr:nth-child(3)>td'
    while i < len(M):
        i += 3
        j += 3
        sel += ', td:nth-child(%i)' % i
        sel2 += ', tr:nth-child(%i)>td' % j
    df = pd.DataFrame(M)
    styler0 = df.style
    styler0.set_table_attributes('style="font-size: 15px"')
    styler0.set_table_styles([{'selector': '*', 'props':
        [('color', 'black'), ('border-style', 'solid'), ('border-width', '1px')]},
                              {'selector': 'th', 'props':
                                  [('background-color', 'white'), ('font-size', '10px'), ('color', 'white')]},
                              {'selector': sel, 'props':
                                  [('border-right-width', '5px')]},
                              {'selector': sel2, 'props':
                                  [('border-bottom-width', '5px')]},
                              ])
    styler0.apply(lambda x: ["background: #E4E4E4" if v != "" else "" for v in x], axis=1)
    html_file = "styled_tabler.html"
    with open(html_file, "w") as file:
        file.write(styler0._repr_html_())

    # Открытие HTML файла в браузере
    webbrowser.open('file://' + os.path.realpath(html_file))


# # Входные данные
# Входные данные для задачи на рисунке 2
K = 9
Kl = list(range(K))

N = 2
Nl = list(range(N))

Eq = [((1, 2), (2, 2), (1, 1)),
      ((1, 2), (2, 3), (1, 2)),
      ((1, 2), (3, 2), (2, 1)),
      ((1, 2), (3, 3), (2, 2))]

# In[72]:


# Входные данные для задачи на рисунке 2
X0 = [[
    [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1   #K-1
     [0, 1, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],

     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],

     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0]],

    [[0, 0, 0, 0, 0, 1, 0, 0, 0],  # 2
     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],

     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],

     [0, 0, 0, 1, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 1, 0, 0, 0, 0, 0, 0]],

    [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],

     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 1],

     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0]],

    [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],

     [0, 0, 0, 0, 0, 0, 1, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],

     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0]],

    [[0, 0, 0, 0, 0, 0, 1, 0, 0],  # 5
     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],

     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 1, 0, 0, 0, 0, 0, 0],

     [0, 0, 0, 0, 0, 0, 0, 1, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [1, 0, 0, 0, 0, 0, 0, 0, 0]],

    [[0, 0, 0, 0, 0, 0, 0, 0, 1],  # 6
     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],

     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],

     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0]],

    [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
     [1, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],

     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 1, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],

     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0]],

    [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
     [0, 0, 0, 0, 0, 0, 0, 1, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],

     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 1, 0, 0, 0, 0],

     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0]],

    [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],

     [0, 0, 1, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 0, 0, 0, 0],

     [0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 1, 0, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 0, 0, 1, 0, 0, 0]]
],

    [
        [[0, 0, 0, 0, 0, 0, 0, 0, 1],  # 1  K-2
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [1, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
         [0, 0, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 1, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 1, 0, 0, 0, 0, 0],  # 4
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 1, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 1, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 1, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 1, 0, 0],  # 8
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [1, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 1],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]]
    ]]

# In[114]:


# Входные данные для задачи на рисунке 4
K = 9
Kl = list(range(K))

N = 3
Nl = list(range(N))

Eq = [((1, 2), (3, 3), (1, 1)), ((2, 3), (1, 3), (3, 1))]

# In[115]:


# Входные данные для задачи на рисунке 4
X0 = [
    [
        [[0, 0, 0, 0, 1, 0, 0, 0, 0],  # k=1   n=1
         [0, 0, 0, 0, 0, 0, 0, 0, 1],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # k=2
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # k=3
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # k=4
         [0, 0, 0, 0, 1, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 1, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # k=5
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 1, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 1, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [1, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[1, 0, 0, 0, 0, 0, 0, 0, 0],  # k=6
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 1, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # k=7
         [0, 0, 1, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 1, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 1, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 1, 0, 0, 0, 0, 0, 0],  # k=8
         [0, 0, 0, 0, 0, 0, 1, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 1, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 1, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # k=9
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 1],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 1, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]]
    ],

    [
        [[0, 0, 0, 1, 0, 0, 0, 0, 0],  # k=1  n=2
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # k=2
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 1, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 1, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # k=3
         [0, 0, 0, 0, 1, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 1, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # k=4
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [1, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # k=5
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 1, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 1, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # k=6
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 1],
         [0, 0, 0, 1, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 1, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # k=7
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 1, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 1, 0, 0, 0],  # k=8
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 1, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # k=9
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]]
    ],

    [
        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # k=1  n=3
         [0, 0, 0, 0, 0, 0, 1, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # k=2
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 1, 0, 0],  # k=3
         [0, 0, 1, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 1, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # k=4
         [0, 0, 0, 0, 1, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 1, 0, 0, 0],
         [0, 0, 1, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 1, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 1, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # k=5
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 1, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 1],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 1, 0, 0, 0, 0],  # k=6
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [1, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 1, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # k=7
         [1, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 1, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 0],  # k=8
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]],

        [[0, 0, 0, 0, 0, 0, 0, 0, 1],  # k=9
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],

         [0, 0, 0, 0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 1, 0, 0, 0],

         [0, 0, 0, 0, 1, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 1, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0]]
    ]
]

# In[116]:


T = [f"x%i-%i.%i(%i)" % (n + 1, i + 1, j + 1, k + 1) for n in Nl for k in Kl for i in Kl for j in Kl]
KK = len(T)

# In[119]:


printnsudoku(X0)

# # Матрица С

# ### $0*∑_{i,j,k} x(i,j,k) →min$

# In[120]:


C = [0] * KK

# In[121]:


# print_matrix([C]+[[""]*KK],["",""], T) # Вывод матрицы С


# # Матрица $A_{eq}$

# ### $∑_i x(i,j,k,n) = 1; j,k=1:9, n=1,2...$ (10)

# In[122]:


Aeq10 = []
Beq10 = []
T10 = []
for n in Nl:
    for j in Kl:
        for k in Kl:
            x = [0] * KK
            T10.append("n%i,k%i,j%i" % (n + 1, k + 1, j + 1))
            for i in Kl:
                x[n * K ** 3 + k * K ** 2 + (i) * K + (j)] = 1
            Aeq10.append(x)
            Beq10.append(1)

        # In[123]:

# print_matrix2(Aeq10, T10, T) # вывод матрицы ограничения 10
# print_matrix([Beq10]+[[""]*len(Beq10)],["",""], T10)


# ### $∑_j x(i,j,k,n) = 1; i,k=1:9, n=1,2...$ (11)

# In[124]:


Aeq11 = []
Beq11 = []
T11 = []
for n in Nl:
    for i in Kl:
        for k in Kl:
            x = [0] * KK
            T11.append("n%i,k%i,i%i" % (n + 1, k + 1, i + 1))
            for j in Kl:
                x[n * K ** 3 + k * K ** 2 + (i) * K + (j)] = 1
            Aeq11.append(x)
            Beq11.append(1)

# In[125]:


# print_matrix2(Aeq11, T11, T) # вывод матрицы ограничения 11
# print_matrix([Beq11]+[[""]*len(Beq11)],["",""], T11)


# ### $∑_k x(i,j,k,n) = 1; i,j=1:9, n=1,2...$ (12)

# In[126]:


Aeq12 = []
Beq12 = []
T12 = []
for n in Nl:
    for i in Kl:
        for j in Kl:
            x = [0] * KK
            T12.append("n%i,i%i;j%i" % (n + 1, i + 1, j + 1))
            for k in Kl:
                x[n * K ** 3 + k * K ** 2 + (i) * K + (j)] = 1
            Aeq12.append(x)
            Beq12.append(1)

# In[127]:


# print_matrix2(Aeq12, T12, T) # вывод матрицы ограничения 12
# print_matrix([Beq12]+[[""]*len(Beq12)],["",""], T12)
# export_matrix2(Aeq12, T12, T, 't12.xlsx')


# ### $∑_{k=1}^9 ∑_{j=3(u-1)+1}^{3u} ∑_{i=3(v-1)+1}^{3v} x(i,j,k,n) = 9;     u,v=1:3, n=1,2...$ (13)

# In[128]:


Ul = list(range(1, 3 + 1))
Vl = list(range(1, 3 + 1))
Aeq13 = []
Beq13 = []
T13 = []
for n in Nl:
    for v in Ul:
        for u in Vl:
            x = [0] * KK
            T13.append("n%i,v%i,u%i" % (n + 1, v, u))
            for k in Kl:
                for i in range(3 * (v - 1) + 1, 3 * v + 1):
                    for j in range(3 * (u - 1) + 1, 3 * u + 1):
                        x[n * K ** 3 + k * K ** 2 + (i - 1) * K + (j - 1)] = 1
            Aeq13.append(x)
            Beq13.append(9)

# In[129]:


# print_matrix2(Aeq13, T13, T) # вывод матрицы ограничения 13
# print_matrix([Beq13]+[[""]*len(Beq13)],["",""], T13)


# ### $x(i,j,k,n)=1,{i,j,k,n}$ (15)

# In[130]:


Aeq15 = []
Beq15 = []
T15 = []
for n in Nl:
    for k in Kl:
        for i in Kl:
            for j in Kl:
                x = [0] * KK
                if X0[n][k][i][j] == 1:
                    T15.append("n%i,k%i,i%i,j%i" % (n + 1, k + 1, i + 1, j + 1))
                    x[n * K ** 3 + k * K ** 2 + i * K + j] = X0[n][k][i][j]
                    Aeq15.append(x)
                    Beq15.append(1)

# In[131]:


# print_matrix2(Aeq15, T15, T) # вывод матрицы ограничения 15
# print_matrix([Beq15]+[[""]*len(Beq15)],["",""], T15)
# export_matrix2(Aeq15, T15, T, 't15.xlsx')


# ### $x(i_1,j_1,k_1,n)=x(i_2,j_2,k_2,m),n≠m$	(16)
# #### $x(i_1,j_1,k_1,n)-x(i_2,j_2,k_2,m)=0,n≠m$

# In[132]:


Ul = list(range(1, 3 + 1))
Vl = list(range(1, 3 + 1))
Aeq16 = []
Beq16 = []
T16 = []
for e in Eq:
    n = e[0][0] - 1
    m = e[0][1] - 1
    u1 = e[1][0]
    v1 = e[1][1]
    u2 = e[2][0]
    v2 = e[2][1]
    ru = u1 - u2
    rv = v1 - v2
    for k in Kl:
        for i in range(1, 3 + 1):
            i1 = ((u1 - 1) * 3 + i) - 1
            i2 = ((u2 - 1) * 3 + i) - 1
            for j in range(1, 3 + 1):
                j1 = ((v1 - 1) * 3 + j) - 1
                j2 = ((v2 - 1) * 3 + j) - 1
                x = [0] * KK
                T16.append("n%i-m%i,k%i,i%i,j%i" % (n + 1, m + 1, k + 1, i, j))
                x[n * K ** 3 + k * K ** 2 + i1 * K + j1] = 1
                x[m * K ** 3 + k * K ** 2 + i2 * K + j2] = -1
                Aeq16.append(x)
                Beq16.append(0)

# In[133]:


# print_matrix2(Aeq16, T16, T) # вывод матрицы ограничения 16
# print_matrix([Beq16]+[[""]*len(Beq16)],["",""], T16)
# export_matrix2(Aeq16, T16, T, 't16.xlsx')


# In[134]:


Aeq = Aeq10 + Aeq11 + Aeq12 + Aeq13 + Aeq15 + Aeq16
Beq = Beq10 + Beq11 + Beq12 + Beq13 + Beq15 + Beq16

# ## Bounds

# In[135]:


Lb = [0] * (KK)
Ub = [1] * (KK)
bns = list(zip(Lb, Ub))
# print(bns)


# In[ ]:


# In[136]:


import scipy as sci

res = sci.optimize.linprog(C, A_eq=Aeq, b_eq=Beq, A_ub=None, b_ub=None, bounds=bns, method='highs', callback=None,
                           options=None, x0=None, integrality=1)
print(res)


# In[137]:


def convert(M, n):
    Mn = np.reshape(M, [n, 9, 9, 9])
    print(Mn)
    return list(Mn)


# In[138]:


X = list(res.x)
X2 = convert(X, N)

# In[139]:


printnsudoku(X2)

# In[ ]:


# In[ ]:




